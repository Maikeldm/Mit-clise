import axios from 'axios'
import fs from 'fs'
import { execSync } from 'child_process'

const handler = async (m, { conn }) => {
  const from = m.chat
  const isAdmins = m.isGroup ? (await conn.groupMetadata(from)).participants.some(p => p.id === m.sender && p.admin) : false
  const isAdminModeEnabled = global.adminModeData?.[from]?.adminMode || false

  if (isAdminModeEnabled && !isAdmins) {
    return conn.sendMessage(from, { text: "‚ùå Este comando solo est√° disponible para administradores." }, { quoted: m })
  }

  try {
    const quoted = m.quoted
    const mentioned = m.message?.extendedTextMessage?.contextInfo?.mentionedJid || []
    const targetUser = quoted?.sender || (mentioned.length > 0 ? mentioned[0] : null)

    let mediaUrl = ""
    try {
      const res = await axios.get("https://nekos.best/api/v2/cry", { timeout: 5000 })
      mediaUrl = res.data.results?.[0]?.url
      if (!mediaUrl) throw new Error("GIF no encontrado")
    } catch {
      const waifu = await axios.get("https://api.waifu.pics/sfw/cry")
      mediaUrl = waifu.data.url
    }

    const senderName = m.sender.split("@")[0]
    const msg = targetUser
      ? `> *\`@${senderName}\`* *est√° llorando por* *\`@${targetUser.split("@")[0]}\`*...üíî`
      : `> *\`@${senderName}\`* *est√° llorando...üíî*`

    const gifPath = `./downloads/${Date.now()}_cry.gif`
    const mp4Path = `./downloads/${Date.now()}_cry.mp4`

    const response = await axios({ url: mediaUrl, responseType: "stream" })
    const writer = fs.createWriteStream(gifPath)
    response.data.pipe(writer)
    await new Promise((res, rej) => {
      writer.on("finish", res)
      writer.on("error", rej)
    })

    const cmd = `ffmpeg -i ${gifPath} -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2,fps=15" -c:v libx264 -preset slow -crf 23 -pix_fmt yuv420p -movflags +faststart ${mp4Path}`
    execSync(cmd)

    await conn.sendMessage(
      m.chat,
      {
        video: { url: mp4Path },
        caption: msg,
        gifPlayback: true,
        mentions: targetUser ? [m.sender, targetUser] : [m.sender],
      }
    )

    fs.unlinkSync(gifPath)
    fs.unlinkSync(mp4Path)
  } catch (err) {
    console.error("Error en cry:", err.message)
    return conn.sendMessage(m.chat, { text: `‚ùå Error al buscar la escena de anime: ${err.message}` }, { quoted: m })
  }
}

handler.command = ['cry']
handler.tags = ['rea√ß√µes']
handler.group = true

export default handler